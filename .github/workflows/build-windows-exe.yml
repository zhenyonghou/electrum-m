name: Build Windows EXE

# 触发条件：推送到main/master分支，或手动触发
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows-exe:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 检出代码（包含子模块）
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # 获取完整的git历史
    
    # 2. 设置Docker环境
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # 3. 缓存Docker镜像层（可选，加速构建）
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    # 4. 构建Windows二进制文件
    - name: Build Windows binaries
      run: |
        cd contrib/build-wine
        
        # 检查Docker是否可用
        docker --version
        docker info
        
        # 确保所有脚本都有执行权限
        echo "Setting execute permissions for scripts..."
        chmod +x build-ci.sh build.sh make_win.sh build-github-actions.sh build-simple.sh build-final.sh
        # 递归设置整个项目的脚本权限
        find ../../ -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
        ls -la *.sh
        echo "Checking file permissions after chmod..."
        ls -la make_win.sh
        
        # 验证关键脚本确实可读
        echo "Testing if make_win.sh is readable:"
        head -5 make_win.sh || echo "Cannot read make_win.sh"
        
        # 检查文件系统类型（某些文件系统不支持执行权限）
        df -T . || echo "Cannot check filesystem type"
        
        # 使用CI专用的构建脚本（无交互式标志）
        echo "Using CI-friendly build script..."
        
        # 设置环境变量
        export CI=true
        
        # 设置可重现构建并运行
        echo "Starting build process with multiple fallback strategies..."
        echo "Script priority order:"
        echo "  1. build-final.sh - Handles UID mapping and all permissions"
        echo "  2. build-simple.sh - Simple Docker execution"
        echo "  3. build-github-actions.sh - GitHub Actions optimized"
        echo "  4. build-ci.sh - CI environment script"
        echo "  5. build.sh (modified) - Original script with TTY fixes"
        echo "  6. Manual Docker - Last resort"
        echo ""
        
        # 首先尝试最终脚本（处理用户ID映射）
        echo "=== Trying Method 1: Final script with UID mapping ==="
        if ./build-final.sh; then
          echo "===== Final script succeeded ====="
        elif ./build-simple.sh; then
          echo "===== Simple script succeeded ====="
        elif ./build-github-actions.sh; then
          echo "===== GitHub Actions script succeeded ====="
        elif ELECBUILD_COMMIT=HEAD ./build-ci.sh; then
          echo "===== CI script succeeded ====="
        else
          echo "=== All automated scripts failed, trying manual methods ==="
          
          # 方法5：修改原始脚本
          echo "=== Trying Method 5: Modified original script ==="
          sed -i 's/docker run -it/docker run/g' build.sh
          sed -i 's|./make_win.sh|bash make_win.sh|g' build.sh
          
          if ELECBUILD_COMMIT=HEAD ./build.sh; then
            echo "===== Modified original script succeeded ====="
          else
            # 方法6：手动Docker命令
            echo "=== Trying Method 6: Manual Docker commands ==="
            echo "Building Docker image manually..."
            docker build -t electrum-wine-builder-img .
            echo "Running Docker container manually..."
            docker run --rm \
              -v "$(pwd)/../..":/opt/wine64/drive_c/electrum \
              --workdir /opt/wine64/drive_c/electrum/contrib/build-wine \
              electrum-wine-builder-img \
              bash -c "echo 'Manual Docker run - executing make_win.sh with bash'; bash make_win.sh"
              
            # 检查最终结果
            if [ ! -f "dist/*.exe" ] && [ ! -f "../../contrib/build-wine/dist/*.exe" ]; then
              echo "===== ALL BUILD METHODS FAILED ====="
              echo "Please check the debug information below for details."
            fi
          fi
        fi
    
    # 5. 列出生成的文件（用于调试）
    - name: List generated files and debug info
      if: always()  # 即使构建失败也要运行
      run: |
        echo "===== BUILD RESULT ANALYSIS ====="
        echo "Contents of contrib/build-wine/dist/:"
        ls -la contrib/build-wine/dist/ 2>/dev/null || echo "dist directory not found"
        
        echo "===== CHECKING FOR ANY OUTPUT FILES ====="
        find contrib/build-wine/ -name "*.exe" -o -name "*.zip" -o -name "*.msi" | head -20
        
        echo "===== DOCKER DEBUG INFO ====="
        echo "Docker containers (including stopped):"
        docker ps -a
        echo "Docker images:"
        docker images
        
        echo "===== LOG FILES ====="
        find contrib/build-wine/ -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || echo "No log files found"
        
        echo "===== FILE PERMISSIONS CHECK ====="
        ls -la contrib/build-wine/*.sh
        
        echo "===== DISK SPACE ====="
        df -h
        
        echo "===== AVAILABLE MEMORY ====="
        free -h || echo "free command not available"
    
    # 6. 上传构建好的exe文件
    - name: Upload Windows binaries
      uses: actions/upload-artifact@v4
      with:
        name: electrum-windows-exe-${{ github.sha }}
        path: |
          contrib/build-wine/dist/*.exe
          contrib/build-wine/dist/*.zip
        retention-days: 30
        if-no-files-found: error
    
    # 7. 创建Release（可选，仅在推送tag时）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          contrib/build-wine/dist/*.exe
          contrib/build-wine/dist/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 